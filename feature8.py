# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'feature8.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

import qrcode
import os
import random

class Ui_window_feature8(object):
    def setupUi(self, window_feature8):
        window_feature8.setObjectName("window_feature8")
        window_feature8.resize(510, 600)
        self.label_title = QtWidgets.QLabel(window_feature8)
        self.label_title.setGeometry(QtCore.QRect(160, 180, 190, 40))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label_title.setFont(font)
        self.label_title.setObjectName("label_title")
        self.lineEdit_codenum = QtWidgets.QLineEdit(window_feature8)
        self.lineEdit_codenum.setGeometry(QtCore.QRect(370, 260, 120, 40))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(14)
        self.lineEdit_codenum.setFont(font)
        self.lineEdit_codenum.setText("")
        self.lineEdit_codenum.setObjectName("lineEdit_codenum")
        self.lineEdit_codenum.setValidator(QtGui.QIntValidator())
        self.label_tip = QtWidgets.QLabel(window_feature8)
        self.label_tip.setGeometry(QtCore.QRect(20, 260, 351, 40))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(14)
        self.label_tip.setFont(font)
        self.label_tip.setObjectName("label_tip")
        self.pushButton_create = QtWidgets.QPushButton(window_feature8)
        self.pushButton_create.setGeometry(QtCore.QRect(205, 340, 100, 40))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(14)
        self.pushButton_create.setFont(font)
        self.pushButton_create.setObjectName("pushButton_create")

        # 生成
        self.pushButton_create.clicked.connect(lambda: self.create())

        self.retranslateUi(window_feature8)
        QtCore.QMetaObject.connectSlotsByName(window_feature8)

    def retranslateUi(self, window_feature8):
        _translate = QtCore.QCoreApplication.translate
        window_feature8.setWindowTitle(_translate("window_feature8", "Form"))
        self.label_title.setText(_translate("window_feature8", "二维码批量输出"))
        self.label_tip.setText(_translate("window_feature8", "请输入需要生成的条形码数量："))
        self.pushButton_create.setText(_translate("window_feature8", "生成"))

    def create(self):
        qrcode_count_num = self.lineEdit_codenum.text()
        if int(qrcode_count_num) == 0:
            QtWidgets.QMessageBox.warning(QtWidgets.QWidget(), "警告", "数量错误！", QtWidgets.QMessageBox.Yes,
                                          QtWidgets.QMessageBox.Yes)
        else:
            # 判断是否存在二维码保存的文件夹，如果没有则生成
            if not os.path.exists("qrcode"):
                os.mkdir("qrcode")
            # 生成防伪码
            for i in range(int(qrcode_count_num)):
                temp = ''
                for j in range(12):
                    temp = temp + chr(random.randrange(ord('0'), ord('9') + 1))
                # 生成二维码并保存
                encoder = qrcode.make(temp)
                encoder.save('qrcode/' + temp + '.png')
            # 提示用户生成成功
            tip_sentence = "已生成二维码共计：" \
                           + str(qrcode_count_num) \
                           + "\n防伪码文件位于“qrcode”文件夹下\n请及时备份以防文件被覆盖\n"
            QtWidgets.QMessageBox.information(QtWidgets.QWidget(), "提示", tip_sentence, QtWidgets.QMessageBox.Yes,
                                              QtWidgets.QMessageBox.Yes)
